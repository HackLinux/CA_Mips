module EX_MEM_Reg(input RegWrite, input MemtoReg, 
	input Branch, input MemRead, input MemWrite, 
	input RegDest, input ALUOp, input ALUSrc,
	input [31:0] address, input [31:0] ALUResult, input zero, input [31:0] SignExtend, 
	input [5:0] RegWriteAdd1, input [5:0] RegWriteAdd2,
	output RegWrite_Out, output MemtoReg_Out, 
	output Branch_Out, output MemRead_Out, output MemWrite_Out, 
	output RegDest_Out, output ALUOp_Out, output ALUSrc_Out,
	output [31:0] address_Out, output [31:0] ALUResult_Out, output [31:0] zero_Out, output [31:0] SignExtend_Out, 
	output [5:0] RegWriteAdd1_Out, output [5:0] RegWriteAdd2_Out);
	
	reg RegWrite_Reg;
	reg MemtoReg_Reg
	reg Branch_Reg;
	reg MemRead_Reg;
	reg MemWrite_Reg;
	reg RegDest_Reg; 
	reg ALUOp_Reg; 
	reg ALUSrc_Reg;
	reg [31:0] address_Reg; 
	reg [31:0] ALUResult_Reg; 
	reg zero_Reg; 
	reg [31:0] SignExtend_Reg; 
	reg [5:0] RegWriteAdd1_Reg; 
	reg [5:0] RegWriteAdd2_Reg;
	
	assign RegWrite_Out = RegWrite_Reg; 
	assign MemtoReg_Out = MemtoReg_Reg; 
	assign Branch_Out = Branch_Reg; 
	assign MemRead_Out = MemRead_Reg; 
	assign MemWrite_Out = MemWrite_Reg; 
	assign RegDest_Out = RegDest_Reg; 
	assign ALUOp_Out = ALUOp_Reg; 
	assign ALUSrc_Out = ALUSrc_Reg;
	assign address_Out = address_Reg; 
	assign ALUResult_Out = ALUResult_Reg; 
	assign zero_Out = zero_Reg; 
	assign SignExtend_Out = SignExtend_Reg; 
	assign RegWriteAdd1_Out = RegWriteAdd1_Reg; 
	assign RegWriteAdd2_Out = RegWriteAdd2_Reg;
	
	always@(posedge clk, posedge rst)
	begin
		if(rst)
		begin
			RegWrite_Reg <= 0;
			MemtoReg_Reg <= 0;
			Branch_Reg <= 0;
			MemRead_Reg <= 0;
			MemWrite_Reg <= 0;
			RegDest_Reg <= 0; 
			ALUOp_Reg <= 0; 
			ALUSrc_Reg <= 0;
			address_Reg <= 0; 
			ALUResult_Reg <= 0; 
			zero_Reg <= 0; 
			SignExtend_Reg <= 0; 
			RegWriteAdd1_Reg <= 0; 
			RegWriteAdd2_Reg <= 0;
		end
		else
		begin
			RegWrite_Reg <= RegWrite;
			MemtoReg_Reg <= MemtoReg;
			Branch_Reg <= Branch;
			MemRead_Reg <= MemRead;
			MemWrite_Reg <= MemWrite;
			RegDest_Reg <= RegDest; 
			ALUOp_Reg <= ALUOp; 
			ALUSrc_Reg <= ALUSrc;
			address_Reg <= address; 
			ALUResult_Reg <= ALUResult; 
			zero_Reg <= zero; 
			SignExtend_Reg <= SignExtend; 
			RegWriteAdd1_Reg <= RegWriteAdd1; 
			RegWriteAdd2_Reg <= RegWriteAdd2;
		end
	end
	
endmodule